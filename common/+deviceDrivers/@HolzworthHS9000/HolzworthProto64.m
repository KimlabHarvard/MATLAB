function [methodinfo,structs,enuminfo,ThunkLibName]=HolzworthProto
%HOLZWORTHPROTO Create structures to define interfaces found in 'HolzworthMulti'.

%This function was generated by loadlibrary.m parser version 1.1.6.35 on Mon Feb 25 14:15:49 2013
%perl options:'HolzworthMulti.i -outfile=HolzworthProto.m -thunkfile=HolzworthMulti64_thunk_pcwin64.c -header=HolzworthMulti.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'HolzworthMulti64_thunk_pcwin64');
%  int deviceAttached ( const char * serialnum ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='deviceAttached'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int openDevice ( const char * serialnum ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='openDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  char * getAttachedDevices ( void ); 
fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='getAttachedDevices'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  void close_all ( void ); 
fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='close_all'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  char * usbCommWrite ( const char * serialnum , const char * pBuf ); 
fcns.thunkname{fcnNum}='cstringcstringcstringThunk';fcns.name{fcnNum}='usbCommWrite'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
%  int RFPowerOn ( const char * serialnum ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='RFPowerOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int RFPowerOff ( const char * serialnum ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='RFPowerOff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  short isRFPowerOn ( const char * serialnum ); 
fcns.thunkname{fcnNum}='int16cstringThunk';fcns.name{fcnNum}='isRFPowerOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int setPower ( const char * serialnum , short powernum ); 
fcns.thunkname{fcnNum}='int32cstringint16Thunk';fcns.name{fcnNum}='setPower'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int16'};fcnNum=fcnNum+1;
%  int setPowerS ( const char * serialnum , const char * powerstr ); 
fcns.thunkname{fcnNum}='int32cstringcstringThunk';fcns.name{fcnNum}='setPowerS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
%  short readPower ( const char * serialnum ); 
fcns.thunkname{fcnNum}='int16cstringThunk';fcns.name{fcnNum}='readPower'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int setPhase ( const char * serialnum , short phasenum ); 
fcns.thunkname{fcnNum}='int32cstringint16Thunk';fcns.name{fcnNum}='setPhase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int16'};fcnNum=fcnNum+1;
%  int setPhaseS ( const char * serialnum , const char * phasestr ); 
fcns.thunkname{fcnNum}='int32cstringcstringThunk';fcns.name{fcnNum}='setPhaseS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
%  short readPhase ( const char * serialnum ); 
fcns.thunkname{fcnNum}='int16cstringThunk';fcns.name{fcnNum}='readPhase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int setFrequency ( const char * serialnum , long long frequencynum ); 
fcns.thunkname{fcnNum}='int32cstringint64Thunk';fcns.name{fcnNum}='setFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int64'};fcnNum=fcnNum+1;
%  int setFrequencyS ( const char * serialnum , const char * frequencystr ); 
fcns.thunkname{fcnNum}='int32cstringcstringThunk';fcns.name{fcnNum}='setFrequencyS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
%  long long readFrequency ( const char * serialnum ); 
fcns.thunkname{fcnNum}='int64cstringThunk';fcns.name{fcnNum}='readFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int64'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int recallFactoryPreset ( const char * serialnum ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='recallFactoryPreset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int saveCurrentState ( const char * serialnum ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='saveCurrentState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int recallSavedState ( const char * serialnum ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='recallSavedState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int ModEnableNo ( const char * serialnum ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='ModEnableNo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int ModEnableFM ( const char * serialnum ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='ModEnableFM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int ModEnablePulse ( const char * serialnum ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='ModEnablePulse'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int ModEnablePM ( const char * serialnum ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='ModEnablePM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int setFMDeviation ( const char * serialnum , short fmDevnum ); 
fcns.thunkname{fcnNum}='int32cstringint16Thunk';fcns.name{fcnNum}='setFMDeviation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int16'};fcnNum=fcnNum+1;
%  int setFMDeviationS ( const char * serialnum , const char * fmDevstr ); 
fcns.thunkname{fcnNum}='int32cstringcstringThunk';fcns.name{fcnNum}='setFMDeviationS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
%  int setPMDeviation ( const char * serialnum , short pmnum ); 
fcns.thunkname{fcnNum}='int32cstringint16Thunk';fcns.name{fcnNum}='setPMDeviation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int16'};fcnNum=fcnNum+1;
%  int setPMDeviationS ( const char * serialnum , const char * pmstr ); 
fcns.thunkname{fcnNum}='int32cstringcstringThunk';fcns.name{fcnNum}='setPMDeviationS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
%  char * write_string3 ( const char * serialnum , const char * pBuf ); 
fcns.thunkname{fcnNum}='cstringcstringcstringThunk';fcns.name{fcnNum}='write_string3'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
methodinfo=fcns;